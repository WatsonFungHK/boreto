datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String      @id @default(cuid())
  first_name   String?
  last_name    String?
  email        String      @unique
  password     String
  createdAt    DateTime    @default(now()) @map(name: "created_at")
  updatedAt    DateTime    @updatedAt @map(name: "updated_at")
  Account      Account[]
  Session      Session[]
  company      Company?    @relation(fields: [companyId], references: [id])
  companyId    String?
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  officeId     String?
  office       Office?     @relation(fields: [officeId], references: [id])
  UserRole     UserRole[]

  @@map(name: "users")
}

model Staff {
  id     String  @id @default(cuid())
  gender String? // 'M' = Male, 'F' = 'Female, 'U' = 'Unspecified
}

model Department {
  id          String    @id @default(cuid())
  name        String
  description String?
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  status      String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  users       User[]
}

model Address {
  id          String    @id @default(cuid())
  line_1      String
  line_2      String?
  line_3      String?
  city        String?
  state       String?
  country     String
  postal_code String?
  status      String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  type        String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  customer    Customer? @relation(fields: [customerId], references: [id])
  customerId  String?
  officeId    String?
  office      Office?   @relation(fields: [officeId], references: [id])
}

model Office {
  id          String    @id @default(cuid())
  name        String
  description String?
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  type        String    @default("O") // 'O' = Office, 'W' = Warehouse
  status      String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  addresses   Address[]
  users       User[]
}

model Company {
  id                           String            @id @default(cuid())
  name                         String
  legal_name                   String?
  business_registration_number String?
  address                      String?
  phone                        String?
  email                        String?
  website                      String?
  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @updatedAt
  defaultLocale                String            @default("en")
  defaultCurrency              String            @default("HKD")
  User                         User[]
  Customer                     Customer[]
  ProductCategory              ProductCategory[]
  Product                      Product[]
  Department                   Department[]
  Office                       Office[]
  Role                         Role[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id            String    @id @default(cuid())
  first_name    String?
  last_name     String?
  nick_name     String?
  gender        String? // 'M' = Male, 'F' = 'Female, 'U' = 'Unspecified
  email         String?
  phone_number  String?
  credit_amount Int       @default(0)
  birth_date    String?
  joined_date   String?
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  status        String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime? @updatedAt @map(name: "updated_at")
  addresses     Address[]
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  status      String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  products    Product[]
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String?
  price       Int
  categoryId  String?
  category    ProductCategory? @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  companyId   String
  company     Company          @relation(fields: [companyId], references: [id])
  unit        Int
  status      String           @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at  DateTime         @default(now())
  updated_at  DateTime?        @updatedAt
  prices      ProductPrice[]
}

model ProductImage {
  id         String    @id @default(cuid())
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  url        String
  status     String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model ProductPrice {
  id         String    @id @default(cuid())
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  currency   String
  amount     Float
  status     String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model Role {
  id          String           @id @default(cuid())
  name        String
  description String?
  permissions RolePermission[]
  users       UserRole[]
  companyId   String
  company     Company          @relation(fields: [companyId], references: [id])
  created_at  DateTime         @default(now())
  status      String           @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  updated_at  DateTime?        @updatedAt
}

model Permission {
  id          String           @id @default(cuid())
  name        String
  description String?
  roles       RolePermission[]
  created_at  DateTime         @default(now())
  status      String           @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  updated_at  DateTime?        @updatedAt
}

model UserRole {
  userId String
  user   User   @relation(fields: [userId], references: [id])
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  created_at DateTime @default(now())

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  created_at   DateTime   @default(now())

  @@id([roleId, permissionId])
}
