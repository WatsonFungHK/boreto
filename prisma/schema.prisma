datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String      @id @default(cuid())
  first_name   String?
  last_name    String?
  email        String      @unique
  password     String
  createdAt    DateTime    @default(now()) @map(name: "created_at")
  updatedAt    DateTime    @updatedAt @map(name: "updated_at")
  Account      Account[]
  Session      Session[]
  company      Company?    @relation(fields: [companyId], references: [id])
  companyId    String?
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  officeId     String?
  office       Office?     @relation(fields: [officeId], references: [id])
  UserRole     UserRole[]
  AuditLog     AuditLog[]
  Quotation    Quotation[]

  @@map(name: "users")
}

model Staff {
  id            String  @id @default(cuid())
  gender        String? // 'M' = Male, 'F' = 'Female, 'U' = 'Unspecified
  designationId String
  designation   Designation  @relation(fields: [designationId], references: [id])
  status      String      @default("A")
  Benefits      Benefit[]    @relation("EligibleStaff")
  Attendance    Attendance[]
  salaries      Salary[]     @relation("SalaryForStaff")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model Department {
  id          String    @id @default(cuid())
  name        String
  description String?
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  status      String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  users       User[]
  designation Designation[]
}

model Address {
  id          String    @id @default(cuid())
  line_1      String
  line_2      String?
  line_3      String?
  city        String?
  state       String?
  country     String
  postal_code String?
  status      String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  type        String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  customer    Customer? @relation(fields: [customerId], references: [id])
  customerId  String?
  officeId    String?
  office      Office?   @relation(fields: [officeId], references: [id])
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  supplierId  String?
  shipping    Shipping? // Add optional one-to-one relationship to Shipping
}

model Office {
  id          String    @id @default(cuid())
  name        String
  description String?
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  type        String    @default("O") // 'O' = Office, 'W' = Warehouse
  status      String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  addresses   Address[]
  users       User[]
}

model Company {
  id                           String            @id @default(cuid())
  name                         String
  legal_name                   String?
  business_registration_number String?
  address                      String?
  phone                        String?
  email                        String?
  website                      String?
  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @updatedAt
  defaultLocale                String            @default("en")
  defaultCurrency              String            @default("HKD")
  User                         User[]
  Customer                     Customer[]
  ProductCategory              ProductCategory[]
  Product                      Product[]
  Department                   Department[]
  Office                       Office[]
  Role                         Role[]
  Supplier                     Supplier[]
  Order                        Order[]
  AuditLog                     AuditLog[]
  PaymentMethod                PaymentMethod[]
  Quotation                    Quotation[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id            String    @id @default(cuid())
  first_name    String?
  last_name     String?
  nick_name     String?
  gender        String? // 'M' = Male, 'F' = 'Female, 'U' = 'Unspecified
  email         String?
  phone_number  String?
  credit_amount Int       @default(0)
  birth_date    String?
  joined_date   String?
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  status        String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime? @updatedAt @map(name: "updated_at")
  addresses     Address[]
  Order         Order[]
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  status      String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  products    Product[]
}

model Product {
  id           String           @id @default(cuid())
  name         String
  description  String?
  price        Int
  categoryId   String?
  category     ProductCategory? @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  companyId    String
  company      Company          @relation(fields: [companyId], references: [id])
  unit         Int
  pending_unit Int              @default(0)
  status       String           @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at   DateTime         @default(now())
  updated_at   DateTime?        @updatedAt
  prices       ProductPrice[]
  supplier     Supplier?        @relation(fields: [supplierId], references: [id])
  supplierId   String?
  OrderItem    OrderItem[]
  type         String           @default("P") // 'P' = Product, 'S' = Service
}

model ProductImage {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  url        String
  name       String
  order      Int      @default(0)
  status     String   @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([productId, order])
}

model ProductPrice {
  id         String    @id @default(cuid())
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  currency   String
  amount     Float
  status     String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model Role {
  id          String           @id @default(cuid())
  name        String
  description String?
  permissions RolePermission[]
  users       UserRole[]
  companyId   String
  company     Company          @relation(fields: [companyId], references: [id])
  created_at  DateTime         @default(now())
  status      String           @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  updated_at  DateTime?        @updatedAt
}

model Permission {
  id          String           @id @default(cuid())
  name        String
  description String?
  roles       RolePermission[]
  created_at  DateTime         @default(now())
  status      String           @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  updated_at  DateTime?        @updatedAt
}

model UserRole {
  userId String
  user   User   @relation(fields: [userId], references: [id])
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  created_at DateTime @default(now())

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  created_at   DateTime   @default(now())

  @@id([roleId, permissionId])
}

model Contact {
  id         String    @id @default(cuid())
  value      String
  type       String // 'E' = Email, 'P' = Phone, 'F' = Fax,
  remark     String?
  status     String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  Supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?
}

model Supplier {
  id         String    @id @default(cuid())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  status     String    @default("A") // 'A' = Active, 'I' = Inactive, 'D' = Deleted
  addresses  Address[]
  companyId  String
  company    Company   @relation(fields: [companyId], references: [id])
  products   Product[]
  contacts   Contact[]
}

model Order {
  id          String      @id @default(cuid())
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  status      String      @default("A")
  orderItems  OrderItem[]
  Shipping    Shipping[]
  company     Company     @relation(fields: [companyId], references: [id])
  companyId   String
  totalAmount Float?
  Payment     Payment[]
}

// all are snapshot of product at the time of order
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  name      String  @default("")
  quantity  Int
  price     Float
  subtotal  Float
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED_DELIVERY
  RETURNED
  CANCELLED
}

model Shipping {
  id               String         @id @default(cuid())
  orderId          String
  order            Order          @relation(fields: [orderId], references: [id])
  methodId         String
  method           ShippingMethod @relation(fields: [methodId], references: [id])
  cost             Float
  status           ShippingStatus @default(PENDING)
  trackingNumber   String?
  trackingUrl      String?
  trackingProvider String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt
  address          Address        @relation(fields: [addressId], references: [id])
  addressId        String

  @@unique([addressId])
}

model ShippingMethod {
  id          String    @id @default(cuid())
  name        String
  provider    String
  description String?
  companyId   String
  cost        Float?
  status      String    @default("A")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  Shipping Shipping[]
}

model Payment {
  id        String        @id @default(cuid())
  orderId   String
  order     Order         @relation(fields: [orderId], references: [id])
  methodId  String
  method    PaymentMethod @relation(fields: [methodId], references: [id])
  amount    Float
  cost      Float?
  costType  String? // 'P' = Percentage, 'F' = Fixed
  status    String        @default("P") // 'P' = Pending, 'C' = Completed, 'F' = Failed
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
}

model PaymentMethod {
  id          String    @id @default(cuid())
  name        String
  description String
  cost        Float?
  costType    String? // 'P' = Percentage, 'F' = Fixed
  companyId   String
  status      String    @default("A")
  company     Company   @relation(fields: [companyId], references: [id])
  Payment     Payment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Quotation {
  id         String    @id @default(cuid())
  payload    Json
  externalId String
  companyId  String
  creatorId  String
  creator    User      @relation(fields: [creatorId], references: [id])
  status     String    @default("A")
  company    Company   @relation(fields: [companyId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@unique([companyId, externalId])
}

model AuditLog {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  action      String
  targetModel String
  targetId    String
  data        Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  companyId   String
  status      String    @default("A")
  company     Company   @relation(fields: [companyId], references: [id])
}

// put HR schema start here
model Benefit {
  id            String    @id @default(cuid())
  name          String
  status        String    @default("A")
  description   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?     @updatedAt
  Staff         Staff[]       @relation("EligibleStaff")
  designationId String?
  Designation   Designation[] @relation("BenefitForDesignation")
}

model Designation {
  id         String    @id @default(cuid())
  name       String    @unique
  description String 
  status     String    @default("A")
  DepartmentId String? 
  Department Department?  @relation(fields: [DepartmentId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?     @updatedAt
  Staff   Staff[]
  Benefit Benefit[] @relation("BenefitForDesignation")
}

model Attendance {
  id         String    @id @default(cuid())
  date       DateTime
  status     String    @default("A")
  createdAt  DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  StaffId    String
  Staff   Staff  @relation(fields: [StaffId], references: [id])
}

model Salary {
  id         String        @id @default(cuid())
  salaryDate DateTime
  basicPay   Int
  allowance  Int
  payrollStatus     PayrollStatus
  status      String    @default("A")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  staff   Staff  @relation("SalaryForStaff", fields: [staffId], references: [id])
  staffId String
}

enum PayrollStatus {
  PAID
  PENDING
  REJECTED
}
// put HR schema end

// put CRM schema start here

// put CRM schema end
